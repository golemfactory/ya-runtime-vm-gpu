name: CI
on:
  push:
    tags:
      - v*
      - pre-rel-*

env:
  runtime-vm_repository: pwalski/ya-runtime-vm
  runtime-vm_version: pre-rel-v0.3.4-rc14
  self-test-img_repository: golemfactory/ya-self-test-img
  self-test-img_tag: pre-rel-v0.1.0_RC4_xorg
  vm_name: ya-runtime-vm-nvidia
  os_name: linux
  organisation: pwalski
  docker-img_name: golem_nvidia_base

jobs:
  build-golem_nvidia_base:
    name: Build golem_nvidia_base
    runs-on: ubuntu-20.04

    steps:
      - name: Install Musl
        run: sudo apt-get install -y musl-tools musl

      - uses: actions/checkout@v1
        with:
          submodules: "recursive"

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Tag name and version
        id: tag_name
        run: |
          TAG=${GITHUB_REF##*/}
          VERSION=${TAG#v}
          VERSION=${VERSION#pre-rel-v}
          echo "TAG=${TAG}" >> $GITHUB_OUTPUT
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./golem_nvidia_base/
          push: true
          tags: |
            ${{ env.organisation }}/${{ env.docker-img_name }}:${{ steps.tag_name.outputs.VERSION }}
            ${{ env.organisation }}/${{ env.docker-img_name }}:${{ startsWith(steps.tag_name.outputs.TAG, 'pre-rel-') && 'beta' || 'stable' }}
            ${{ env.organisation }}/${{ env.docker-img_name }}:latest

      - name: Copy
        run: |
          cd golem_nvidia_base
          make vmlinuz-virt

      - uses: actions/upload-artifact@v2
        with:
          name: golem_nvidia_base
          path: |
            golem_nvidia_base/vmlinuz-virt

  build-qemu:
    name: Build qemu
    runs-on: ubuntu-20.04

    steps:
      - name: Install Musl
        run: sudo apt-get install -y musl-tools musl

      - uses: actions/checkout@v1
        with:
          submodules: "recursive"

      - name: Make qemu
        run: |
          musl-gcc -v
          git submodule init
          git submodule update
          cd qemu
          make

      - uses: actions/upload-artifact@v2
        with:
          name: qemu
          path: |
            qemu/build/*

  release:
    name: Release
    needs:
      - build-golem_nvidia_base
      - build-qemu
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3

      - name: Download ya-runtime-vm
        uses: robinraju/release-downloader@v1.8
        with:
          repository: ${{ env.runtime-vm_repository }}
          tag: ${{ env.runtime-vm_version }}
          fileName: ya-runtime-vm-${{ env.os_name }}-${{ env.runtime-vm_version }}.tar.gz
          extract: true
          out-file-path: .
          tarBall: false
          zipBall: false

      - name: Download self-test image
        uses: robinraju/release-downloader@v1.8
        with:
          repository: ${{ env.self-test-img_repository }}
          tag: ${{ env.self-test-img_tag }}
          fileName: self-test-gpu.gvmi
          out-file-path: .
          tarBall: false
          zipBall: false

      - uses: actions/download-artifact@v2
        with:
          name: qemu
          path: qemu/build/

      - uses: actions/download-artifact@v2
        with:
          name: golem_nvidia_base
          path: golem_nvidia_base/

      - name: Pack
        id: pack
        shell: bash
        env:
          GITHUB_REF: ${{ github.ref }}
          RUNTIME_VM_VERSION: ${{ env.runtime-vm_version }}
          OS_NAME: ${{ env.os_name }}
          VM_NAME: ${{ env.vm_name }}
        run: |
          TAG_NAME="${GITHUB_REF##*/}"
          TOP_DIR_NAME="${VM_NAME}-${OS_NAME}-${TAG_NAME}"
          TARGET_DIR=build/${TOP_DIR_NAME}/${VM_NAME}
          set -x

          mkdir -p ${TARGET_DIR}
          SRC_DIR=ya-runtime-vm-${OS_NAME}-${RUNTIME_VM_VERSION}/ya-runtime-vm
          rsync -av --exclude='vmrt' --exclude='self-test.gvmi' --exclude='vmlinuz-virt' ${SRC_DIR}/runtime ${TARGET_DIR}
          cp ${SRC_DIR}/ya-runtime-vm ${TARGET_DIR}/${VM_NAME}

          cp self-test-gpu.gvmi         $TARGET_DIR/runtime/self-test.gvmi 
          cp golem_nvidia_base/vmlinuz-virt   $TARGET_DIR/runtime/
          cp qemu/build/*           $TARGET_DIR/runtime/

          chmod +x ${TARGET_DIR}/runtime/vmrt
          chmod +x ${TARGET_DIR}/${VM_NAME}
          
          RUNTIME_DESC=build/${TOP_DIR_NAME}/${VM_NAME}.json
          VERSION=${TAG_NAME#v}
          VERSION=${VERSION#pre-rel-v}
          cp conf/${VM_NAME}.json         ${RUNTIME_DESC}
          sed -i "s/__VERSION__/${VERSION}/"  ${RUNTIME_DESC}

          mkdir -p dist

          cp install.sh dist/install.sh && sed -i "s/__TAG_NAME__/${TAG_NAME}/" dist/install.sh

          (cd build && tar czvf ../dist/"${TOP_DIR_NAME}.tar.gz" "${TOP_DIR_NAME}")

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{secrets.GITHUB_TOKEN}}
          files: dist/*
          prerelease: ${{ !startsWith(github.ref, '/refs/tags/v[0-9]+') }}
