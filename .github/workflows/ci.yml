name: CI
on:
  push:
    tags:
      - v*
      - pre-rel-*

env:
  runtime-vm_repository: golemfactory/ya-runtime-vm
  runtime-vm_version: pre-rel-v0.4.0-rc2
  vm_name: ya-runtime-vm-nvidia
  os_name: linux
  organisation: golemfactory
  docker-img_name: golem-nvidia-base
  docker-img_description: Base image with Nvidia drivers for Golem VM images.
  self-test-img_gvmi: self-test.gvmi

jobs:
  build-golem_nvidia_base:
    name: Build golem-nvidia-base
    runs-on: ubuntu-20.04

    steps:
      - name: Install Musl
        run: sudo apt-get install -y musl-tools musl

      - uses: actions/checkout@v1
        with:
          submodules: "recursive"

      - name: Tag name and version
        id: tag_name
        run: |
          TAG=${GITHUB_REF##*/}
          VERSION=${TAG#v}
          VERSION=${VERSION#pre-rel-v}
          echo "TAG=${TAG}" >> $GITHUB_OUTPUT
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - name: 'Login to GitHub Container Registry'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./golem_nvidia_base/
          push: true
          # Always create `latest` tag. If not make `self_test_img` to use currently build image.
          tags: |
            ghcr.io/${{ env.organisation }}/${{ env.docker-img_name }}:${{ steps.tag_name.outputs.VERSION }}
            ghcr.io/${{ env.organisation }}/${{ env.docker-img_name }}:${{ startsWith(steps.tag_name.outputs.TAG, 'pre-rel-') && 'beta' || 'stable' }}
            ghcr.io/${{ env.organisation }}/${{ env.docker-img_name }}:latest
          outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=${{ env.docker-img_description }}

      - name: Copy
        run: |
          cd golem_nvidia_base
          make vmlinuz-virt

      - uses: actions/upload-artifact@v2
        with:
          name: golem_nvidia_base
          path: |
            golem_nvidia_base/vmlinuz-virt

  build-qemu:
    name: Build qemu
    runs-on: ubuntu-20.04

    steps:
      - name: Install Musl
        run: sudo apt-get install -y musl-tools musl

      - uses: actions/checkout@v1
        with:
          submodules: "recursive"

      - name: Make qemu
        run: |
          musl-gcc -v
          git submodule init
          git submodule update
          cd qemu
          make

      - uses: actions/upload-artifact@v2
        with:
          name: qemu
          path: |
            qemu/build/*

  build-self-test-img:
    name: Build self test img
    needs:
      - build-golem_nvidia_base
    runs-on: ubuntu-20.04
    env:
      gvmkit-build_tag: v0.3.13
      gvmkit-build_dir: gvmkit-build
      gvmkit-build_archive: gvmkit-build-x86_64-unknown-linux-gnu.tar.gz
      self-test-img_tag: self-test
      rust_stable: 1.70.0

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust ${{ env.rust_stable }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.rust_stable }}
          components: rustfmt, clippy

      - name: Check lockfile
        uses: actions-rs/cargo@v1
        with:
          command: tree
          args: --locked

      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Check clippy lints
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-targets --all-features --workspace -- -D warnings

      - name: Unit tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --locked

      - name: 'Login to GitHub Container Registry'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}

      - name: Build Docker image for GPU
        uses: docker/build-push-action@v4
        with:
          context: self_test_img
          push: false
          tags: ${{ env.self-test-img_tag }}

      - name: Download gvmkit-build
        if: startsWith(github.ref, 'refs/tags/')
        uses: robinraju/release-downloader@v1.8
        with:
          repository: golemfactory/gvmkit-build-rs
          tag: ${{ env.gvmkit-build_tag }}
          fileName: ${{ env.gvmkit-build_archive }}
          extract: true
          out-file-path: ${{ env.gvmkit-build_dir }}
          tarBall: false
          zipBall: false

      - name: Build GVMkit image
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          ${{ env.gvmkit-build_dir }}/gvmkit-build ${{ env.self-test-img_tag }}:latest -o ${{ env.self-test-img_gvmi }}

      - uses: actions/upload-artifact@v2
        with:
          name: self_test_img
          path: |
            ${{ env.self-test-img_gvmi }}

  release:
    name: Release
    needs:
      - build-golem_nvidia_base
      - build-qemu
      - build-self-test-img
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3

      - name: Download ya-runtime-vm
        uses: robinraju/release-downloader@v1.8
        with:
          repository: ${{ env.runtime-vm_repository }}
          tag: ${{ env.runtime-vm_version }}
          fileName: ya-runtime-vm-${{ env.os_name }}-${{ env.runtime-vm_version }}.tar.gz
          extract: true
          out-file-path: .
          tarBall: false
          zipBall: false

      - uses: actions/download-artifact@v2
        with:
          name: qemu
          path: qemu/build/

      - uses: actions/download-artifact@v2
        with:
          name: golem_nvidia_base
          path: golem_nvidia_base/

      - uses: actions/download-artifact@v2
        with:
          name: self_test_img
          path: self_test_img/

      - name: Pack
        id: pack
        shell: bash
        env:
          GITHUB_REF: ${{ github.ref }}
          RUNTIME_VM_VERSION: ${{ env.runtime-vm_version }}
          OS_NAME: ${{ env.os_name }}
          VM_NAME: ${{ env.vm_name }}
        run: |
          TAG_NAME="${GITHUB_REF##*/}"
          TOP_DIR_NAME="${VM_NAME}-${OS_NAME}-${TAG_NAME}"
          TARGET_DIR=build/${TOP_DIR_NAME}/${VM_NAME}
          set -x

          mkdir -p ${TARGET_DIR}
          SRC_DIR=ya-runtime-vm-${OS_NAME}-${RUNTIME_VM_VERSION}/ya-runtime-vm
          rsync -av --exclude='vmrt' --exclude='self-test.gvmi' --exclude='vmlinuz-virt' ${SRC_DIR}/runtime ${TARGET_DIR}
          cp ${SRC_DIR}/ya-runtime-vm ${TARGET_DIR}/${VM_NAME}

          cp  self_test_img/${self-test-img_gvmi}             $TARGET_DIR/runtime/${self-test-img_gvmi} 
          cp golem_nvidia_base/vmlinuz-virt $TARGET_DIR/runtime/
          cp qemu/build/*                   $TARGET_DIR/runtime/

          chmod +x ${TARGET_DIR}/runtime/vmrt
          chmod +x ${TARGET_DIR}/${VM_NAME}

          RUNTIME_DESC=build/${TOP_DIR_NAME}/${VM_NAME}.json
          VERSION=${TAG_NAME#v}
          VERSION=${VERSION#pre-rel-v}
          cp conf/${VM_NAME}.json         ${RUNTIME_DESC}
          sed -i "s/__VERSION__/${VERSION}/"  ${RUNTIME_DESC}

          mkdir -p dist
          cp install.sh dist/install.sh && sed -i "s/__TAG_NAME__/${TAG_NAME}/" dist/install.sh
          (cd build && tar czvf ../dist/"${TOP_DIR_NAME}.tar.gz" "${TOP_DIR_NAME}")

      - name: Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          token: ${{secrets.GITHUB_TOKEN}}
          files: dist/*
          prerelease: startsWith(github.ref, 'refs/tags/pre-rel-v')
